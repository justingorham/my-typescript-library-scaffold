/**
 * This file was autogenerated by @justingorham/tsjsvg
 */

import AJV from 'ajv';

export const schema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  definitions: {
    Directory: {
      additionalProperties: false,
      properties: {
        directories: {
          items: {
            $ref: '#/definitions/Directory'
          },
          type: 'array'
        },
        files: {
          items: {
            $ref: '#/definitions/File'
          },
          type: 'array'
        },
        name: {
          type: 'string'
        }
      },
      required: ['name', 'files', 'directories'],
      type: 'object'
    },
    File: {
      additionalProperties: false,
      properties: {
        content: {
          type: 'string'
        },
        name: {
          type: 'string'
        },
        size: {
          type: 'number'
        }
      },
      required: ['name', 'size', 'content'],
      type: 'object'
    }
  }
};

export type DefinitionKeys = keyof typeof schema.definitions;

export class ModelValidator {
  public static for(def: DefinitionKeys) {
    const validator = new ModelValidator(def);
    return { validate: (data: any) => validator.isValidJson(data) };
  }
  constructor(private def: DefinitionKeys) {}

  public isValidJson(data: any) {
    const ajv = new AJV({ logger: false });
    const validate = ajv.compile({
      ...schema,
      $ref: `#/definitions/${this.def}`
    });
    const valid = validate(data);
    return {
      errors: validate.errors,
      valid
    };
  }
}
